<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LiJingBiao</title>
    <description>欢迎来到我的个人博客~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 24 Apr 2022 17:04:36 +0800</pubDate>
    <lastBuildDate>Sun, 24 Apr 2022 17:04:36 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>批量删除过期描述文件</title>
        <description>&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProvisioningProfile.h&lt;/code&gt;文件&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;Foundation/Foundation.h&amp;gt;

@interface ProvisioningProfile : NSObject

- (id)initWithPath:(NSString *)path;

@property (nonatomic, strong, readonly) NSString    *name;
@property (nonatomic, strong, readonly) NSString    *teamName;
@property (nonatomic, strong, readonly) NSString    *valid;
@property (nonatomic, assign, readonly) NSString    *debug;
@property (nonatomic, strong, readonly) NSDate      *creationDate;
@property (nonatomic, strong, readonly) NSDate      *expirationDate;
@property (nonatomic, strong, readonly) NSString    *UUID;
@property (nonatomic, strong, readonly) NSArray     *devices;
@property (nonatomic, assign, readonly) NSInteger   timeToLive;
@property (nonatomic, strong, readonly) NSString    *applicationIdentifier;
@property (nonatomic, strong, readonly) NSString    *bundleIdentifier;
@property (nonatomic, strong, readonly) NSArray     *certificates;
@property (nonatomic, assign, readonly) NSInteger   version;
@property (nonatomic, assign, readonly) NSArray     *prefixes;
@property (nonatomic, strong, readonly) NSString    *appIdName;
@property (nonatomic, strong, readonly) NSString    *teamIdentifier;
@property (nonatomic, strong, readonly) NSString    *path;

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ProvisioningProfile.m&lt;/code&gt;文件&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &quot;ProvisioningProfile.h&quot;

@interface ProvisioningProfile ()

@property (nonatomic, strong) NSDictionary *profileDictionary;
@property (readwrite) NSString  *name;
@property (readwrite) NSString  *teamName;
@property (readwrite) NSString  *valid;
@property (readwrite) NSString  *debug;
@property (readwrite) NSDate    *creationDate;
@property (readwrite) NSDate    *expirationDate;
@property (readwrite) NSString  *UUID;
@property (readwrite) NSArray   *devices;
@property (readwrite) NSInteger timeToLive;
@property (readwrite) NSString  *applicationIdentifier;
@property (readwrite) NSString  *bundleIdentifier;
@property (readwrite) NSArray   *certificates;
@property (readwrite) NSInteger version;
@property (readwrite) NSArray   *prefixes;
@property (readwrite) NSString  *appIdName;
@property (readwrite) NSString  *teamIdentifier;
@property (readwrite) NSString  *path;

@end

@implementation ProvisioningProfile

- (id)initWithPath:(NSString *)path
{
    self = [super init];
    if (self) {
        self.path = path;
        self.profileDictionary = [self provisioningProfileAtPath:path];
        [self processDictionary];
    }
    return self;
}

- (void)processDictionary
{
    self.appIdName = self.profileDictionary[@&quot;AppIDName&quot;];
    self.teamIdentifier = self.profileDictionary[@&quot;Entitlements&quot;][@&quot;com.apple.developer.team-identifier&quot;];
    self.name = self.profileDictionary[@&quot;Name&quot;];
    self.teamName = self.profileDictionary[@&quot;TeamName&quot;];
    self.debug = [self.profileDictionary[@&quot;Entitlements&quot;][@&quot;get-task-allow&quot;] isEqualToNumber:@(1)] ? @&quot;YES&quot; : @&quot;NO&quot;;
    self.creationDate = self.profileDictionary[@&quot;CreationDate&quot;];
    self.expirationDate = self.profileDictionary[@&quot;ExpirationDate&quot;];
    self.devices = self.profileDictionary[@&quot;ProvisionedDevices&quot;];
    self.timeToLive = [self.profileDictionary[@&quot;TimeToLive&quot;] integerValue];
    self.applicationIdentifier = self.profileDictionary[@&quot;Entitlements&quot;][@&quot;application-identifier&quot;];
    self.certificates = self.profileDictionary[@&quot;DeveloperCertificates&quot;];
    self.valid = ([[NSDate date] timeIntervalSinceDate:self.expirationDate] &amp;gt; 0) ? @&quot;NO&quot; : @&quot;YES&quot;;
    self.version = [self.profileDictionary[@&quot;Version&quot;] integerValue];
    self.bundleIdentifier = self.applicationIdentifier;
    self.UUID = self.profileDictionary[@&quot;UUID&quot;];
    self.prefixes = self.profileDictionary[@&quot;ApplicationIdentifierPrefix&quot;];
    
    for (NSString *prefix in self.prefixes) {
        NSRange range = [self.bundleIdentifier rangeOfString:prefix];
        if (range.location != NSNotFound)
        {
            self.bundleIdentifier = [self.bundleIdentifier stringByReplacingOccurrencesOfString:[NSString stringWithFormat:@&quot;%@.&quot;, prefix] withString:@&quot;&quot;];
        }
    }
    
}

- (NSDictionary *)provisioningProfileAtPath:(NSString *)path {
    CMSDecoderRef decoder = NULL;
    CFDataRef dataRef = NULL;
    NSString *plistString = nil;
    NSDictionary *plist = nil;
    
    @try {
        CMSDecoderCreate(&amp;amp;decoder);
        NSData *fileData = [NSData dataWithContentsOfFile:path];
        CMSDecoderUpdateMessage(decoder, fileData.bytes, fileData.length);
        CMSDecoderFinalizeMessage(decoder);
        CMSDecoderCopyContent(decoder, &amp;amp;dataRef);
        plistString = [[NSString alloc] initWithData:(__bridge NSData *)dataRef encoding:NSUTF8StringEncoding];
        NSData *plistData = [plistString dataUsingEncoding:NSUTF8StringEncoding];
        
        plist = [NSPropertyListSerialization propertyListWithData:plistData options:NSPropertyListImmutable format:nil error:nil];
    }
    @catch (NSException *exception) {
        NSLog(@&quot;Could not decode file.\n&quot;);
    }
    @finally {
        if (decoder) CFRelease(decoder);
        if (dataRef) CFRelease(dataRef);
    }
    
    return plist;
}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;main.m&lt;/code&gt;文件&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//
//  main.m
//  ProvisioningHelper
//
//  Created by lijingbiao on 2022/4/24.
//
#import &amp;lt;AppKit/AppKit.h&amp;gt;
#import &quot;ProvisioningProfile.h&quot;
#import &amp;lt;Foundation/Foundation.h&amp;gt;
static const NSString *kMobileprovisionDirName = @&quot;Library/MobileDevice/Provisioning Profiles&quot;;

int main(int argc, const char * argv[]) {
    @autoreleasepool {
        NSFileManager *manager = [NSFileManager defaultManager];
        NSString *ProvisioningPath = [NSString stringWithFormat:@&quot;%@/%@&quot;, NSHomeDirectory(), kMobileprovisionDirName];
        [[NSWorkspace sharedWorkspace]openURL:[NSURL fileURLWithPath:ProvisioningPath]];
        NSLog(@&quot;描述文件路径:%@&quot;,ProvisioningPath);
        NSArray *provisionExtensions = @[@&quot;mobileprovision&quot;, @&quot;provisionprofile&quot;];
        NSArray *provisioningProfiles = [manager contentsOfDirectoryAtPath:[NSString stringWithFormat:@&quot;%@/%@&quot;, NSHomeDirectory(), kMobileprovisionDirName] error:nil];
        provisioningProfiles = [provisioningProfiles filteredArrayUsingPredicate:[NSPredicate predicateWithFormat:@&quot;pathExtension IN %@&quot;, provisionExtensions]];
        
        NSMutableArray *provisioningArray = @[].mutableCopy;
        [provisioningProfiles enumerateObjectsUsingBlock:^(id obj, NSUInteger idx, BOOL *stop) {
            NSString *path = (NSString*)obj;
            BOOL isDirectory;
            if ([manager fileExistsAtPath:[NSString stringWithFormat:@&quot;%@/%@/%@&quot;, NSHomeDirectory(), kMobileprovisionDirName, path] isDirectory:&amp;amp;isDirectory]) {
                ProvisioningProfile *profile = [[ProvisioningProfile alloc] initWithPath:[NSString stringWithFormat:@&quot;%@/%@/%@&quot;, NSHomeDirectory(), kMobileprovisionDirName, path]];
                
                [provisioningArray addObject:profile];
            }
        }];
        for (ProvisioningProfile *profile in provisioningArray) {
            if ([profile.valid isEqualToString:@&quot;NO&quot;] &amp;amp;&amp;amp; [manager fileExistsAtPath:profile.path]) {
                NSDateFormatter*formatter =[[NSDateFormatter alloc]init];
                [formatter setDateFormat:@&quot;yyyy-MM-dd&quot;];
                NSString*expirationDate =[formatter stringFromDate:profile.expirationDate];
                NSLog(@&quot;描述文件：%@已过期,过期日期:%@&quot;,profile.name,expirationDate);
                NSError *error;
                [manager removeItemAtPath:profile.path error:&amp;amp;error];
                if (error) {
                    NSLog(@&quot;%@删除失败:%@&quot;,profile.name,error);
                }else {
                    NSLog(@&quot;%@已删除&quot;,profile.name);
                }
            }
        }

    }
    return 0;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 24 Apr 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/04/provisioningHelp/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/04/provisioningHelp/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>Ruby标准库</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://ruby-doc.org/stdlib-3.1.2/libdoc/&quot;&gt;Ruby标准库&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 18 Apr 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/04/ruby_lib/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/04/ruby_lib/</guid>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>Ruby Ruby 里的 %Q, %q, %W, %w, %x, %r, %s, %i</title>
        <description>&lt;h1 id=&quot;ruby-ruby-里的-q-q-w-w-x-r-s-i-译&quot;&gt;&lt;a href=&quot;/topics/node1&quot;&gt;Ruby&lt;/a&gt; Ruby 里的 %Q, %q, %W, %w, %x, %r, %s, %i (译)&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://simpleror.wordpress.com/2009/03/15/q-q-w-w-x-r-s/&quot;&gt;原文地址&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;q&quot;&gt;%Q&lt;/h2&gt;

&lt;p&gt;用于替代双引号的字符串. 当你需要在字符串里放入很多引号时候, 可以直接用下面方法而不需要在引号前逐个添加反斜杠 (&quot;)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; %Q(Joe said: &quot;Frank said: &quot;#{what_frank_said}&quot;&quot;)
=&amp;gt; &quot;Joe said: &quot;Frank said: &quot;Hello!&quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(&lt;/code&gt;…&lt;code class=&quot;highlighter-rouge&quot;&gt;)&lt;/code&gt;也可用其他非数字字母的符号或成对的符号代替, 诸如&lt;code class=&quot;highlighter-rouge&quot;&gt;[&lt;/code&gt;…&lt;code class=&quot;highlighter-rouge&quot;&gt;]&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;…&lt;code class=&quot;highlighter-rouge&quot;&gt;!&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;…&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;{&lt;/code&gt;…&lt;code class=&quot;highlighter-rouge&quot;&gt;}&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&lt;/code&gt;…&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt;等.&lt;br /&gt;
以下写法全部与上面等效:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; %Q!Joe said: &quot;Frank said: &quot;#{what_frank_said}&quot;&quot;!
&amp;gt;&amp;gt; %Q[Joe said: &quot;Frank said: &quot;#{what_frank_said}&quot;&quot;]
&amp;gt;&amp;gt; %Q+Joe said: &quot;Frank said: &quot;#{what_frank_said}&quot;&quot;+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;除此之外还可省略&lt;code class=&quot;highlighter-rouge&quot;&gt;Q&lt;/code&gt;写作:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; %/Joe said: &quot;Frank said: &quot;#{what_frank_said}&quot;&quot;/
=&amp;gt; &quot;Joe said: &quot;Frank said: &quot;Hello!&quot;&quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;q-1&quot;&gt;%q&lt;/h2&gt;

&lt;p&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;%Q&lt;/code&gt;类似, 但是表示的是单引号字符串&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; %q(Joe said: 'Frank said: '#{what_frank_said} ' ')
=&amp;gt; &quot;Joe said: 'Frank said: '\#{what_frank_said} ' '&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;w&quot;&gt;%W&lt;/h2&gt;

&lt;p&gt;语法近似于&lt;code class=&quot;highlighter-rouge&quot;&gt;%Q&lt;/code&gt;, 用于表示其中元素被双引号括起的数组.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; %W(#{foo} Bar Bar\ with\ space)
=&amp;gt; [&quot;Foo&quot;, &quot;Bar&quot;, &quot;Bar with space&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;w-1&quot;&gt;%w&lt;/h2&gt;

&lt;p&gt;用于表示其中元素被单引号括起的数组. 比较奇怪的是&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;(斜杠空格) 会被转化成``(空格), 但是其他的内容不会.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; %w(a b c\ d \#e #{1}f)
=&amp;gt; [&quot;a&quot;, &quot;b&quot;, &quot;c d&quot;, &quot;\\#e&quot;, &quot;\#{1}f&quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;x&quot;&gt;%x&lt;/h2&gt;

&lt;p&gt;使用`方法执行一段 shell 脚本并返回标准输出内容.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; %x(echo foo:#{foo})
=&amp;gt; &quot;foo:Foo\n&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;r&quot;&gt;%r&lt;/h2&gt;

&lt;p&gt;语法近似于&lt;code class=&quot;highlighter-rouge&quot;&gt;%Q&lt;/code&gt;, 用于正则表达式.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; %r(/home/#{foo})
 =&amp;gt; &quot;/\\/home\\/Foo/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;s&quot;&gt;%s&lt;/h2&gt;

&lt;p&gt;用于表示 symbol, 但是不会对其中表达式等内容进行转化&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt; %s(foo)
=&amp;gt; :foo
&amp;gt;&amp;gt; %s(foo bar)
=&amp;gt; :&quot;foo bar&quot;
&amp;gt;&amp;gt; %s(#{foo} bar)
=&amp;gt; :&quot;\#{foo} bar&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;i&quot;&gt;%i&lt;/h2&gt;

&lt;p&gt;Ruby 2.0 之后引入的语法, 用于生成一个 symbol 数组&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;2.0.0p247 :014 &amp;gt; %i(a b c)
=&amp;gt; [:a, :b, :c]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2&gt;%&lt;/h2&gt;

&lt;p&gt;还有% 操作符 &lt;a href=&quot;http://www.kuqin.com/rubycndocument/man/sprintf_format.html&quot;&gt;% 的用法（即 sprintf）&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;irb(main):125:0&amp;gt; '%02d' % 9
=&amp;gt; &quot;09&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 18 Apr 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/04/RubyRuby%E9%87%8C%E7%9A%84-Q,-q,-W,-w,-x,-r,-s,-i%E8%AF%91/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/04/RubyRuby%E9%87%8C%E7%9A%84-Q,-q,-W,-w,-x,-r,-s,-i%E8%AF%91/</guid>
        
        <category>ruby</category>
        
        
      </item>
    
      <item>
        <title>app优化博客</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/MrLujh/App--performance--Optimization&quot;&gt;app优化博客更新。。。&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Jan 2022 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2022/01/app_optimization/</link>
        <guid isPermaLink="true">http://localhost:4000/2022/01/app_optimization/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>flutter支持MacOS配置</title>
        <description>&lt;h1 id=&quot;1切换flutter-channel&quot;&gt;1、切换flutter channel&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter channel dev
flutter upgrade

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;2启用desktop开发支持&quot;&gt;2、启用desktop开发支持&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter config --enable-windows-desktop
flutter config --enable-macos-desktop
flutter config --enable-linux-desktop

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;3检查环境&quot;&gt;3、检查环境&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter doctor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;4创建flutter-app&quot;&gt;4、创建flutter App&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter create myapp
cd myapp

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;5运行app&quot;&gt;5、运行App&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter run -d windows
flutter run -d macos
flutter run -d linux
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;5build-a-release-app&quot;&gt;5、Build a release app&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter build windows
flutter build macos
flutter build linux

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;6对已存在的app支持desktop&quot;&gt;6、对已存在的App支持Desktop&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;flutter create --platforms=windows,macos,linux

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;参考:https://docs.flutter.dev/desktop&lt;/p&gt;

</description>
        <pubDate>Fri, 19 Nov 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/11/flutter-config-macos/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/11/flutter-config-macos/</guid>
        
        <category>flutter</category>
        
        
      </item>
    
      <item>
        <title>Cocoapods卸载与安装</title>
        <description>&lt;h2 id=&quot;1查看cocoapods组件安装位置&quot;&gt;1、查看CocoaPods组件安装位置：&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;which pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;结果：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/bin/pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;2手动移除这个组件&quot;&gt;2、手动移除这个组件：&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo rm -rf /usr/bin/pod
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;3移除rubygems中的cocoapods程序包&quot;&gt;3、移除RubyGems中的CocoaPods程序包&lt;/h2&gt;
&lt;h3 id=&quot;31查看gems中本地程序包&quot;&gt;3.1、查看gems中本地程序包&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem list
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;32移除程序包&quot;&gt;3.2、移除程序包&lt;/h3&gt;
&lt;p&gt;有了版本号，就可以根据当前版本号移除CocoaPods了：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem uninstall cocoapods -v 1.5.3
sudo gem uninstall cocoapods-core
sudo gem uninstall fourflusher
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;4修改-source-路径&quot;&gt;4、修改 source 路径&lt;/h2&gt;
&lt;h3 id=&quot;41删除-gem-源&quot;&gt;4.1、删除 gem 源：&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem sources --remove https://gems.ruby-china.org
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;42修改-gem-源&quot;&gt;4.2、修改 gem 源：&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem sources -a https://gems.ruby-china.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;5安装cocoapods&quot;&gt;5、安装Cocoapods&lt;/h2&gt;
&lt;h3 id=&quot;51安装cocoapods&quot;&gt;5.1、安装Cocoapods&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install cocoapods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;52安装指定版本&quot;&gt;5.2、安装指定版本&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install -n /usr/local/bin cocoapods -v 1.5.3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 19 Nov 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/11/cocoapods-install/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/11/cocoapods-install/</guid>
        
        <category>cocoapods</category>
        
        
      </item>
    
      <item>
        <title>MacOS命令行终端隐藏电脑名和用户名的方法</title>
        <description>&lt;h1 id=&quot;macos命令行终端隐藏电脑名和用户名的方法&quot;&gt;MacOS命令行终端隐藏电脑名和用户名的方法&lt;/h1&gt;

&lt;p&gt;对于经常在MacOS的命令行终端工作的用户，有一个很头疼的事，那就是命令行终端显示电脑名和用户名，这占据了命令行上的太多空间。&lt;/p&gt;

&lt;p&gt;怎样才可以隐藏电脑名和用户名呢？方法很简单！&lt;/p&gt;

&lt;p&gt;打开终端偏好设置，然后到如下图的卡片&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Shell/2021-11-16/1.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后添加如下命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;PS1=&quot;\W \$ &quot;; clear;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;修改后的卡片如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Shell/2021-11-16/2.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后重新打开命令行终端，就变成如下图一样的简洁了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/Shell/2021-11-16/3.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另外还有一个方法，是我感觉更纯粹的设置方式：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;打开配置文件后，在最后一行下面添加如下代码：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PS1=&quot;[\u@\h \W]\$ &quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后让配置文件立即生效，执行以下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;source ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;说明一下：&lt;br /&gt;
\u – 当前用户名&lt;br /&gt;
\h – 主机名hostname&lt;br /&gt;
\W – 当前目录&lt;br /&gt;
\w – 当前目录的完整路径&lt;br /&gt;
\d – 现在的系统日期&lt;br /&gt;
\t – 现在的系统时间&lt;/p&gt;

&lt;p&gt;PS1 是一个很有意思的变量，是用来定义命令行的提示符的，可以按照我们自己的需求来定义自己喜欢的提示符。&lt;/p&gt;

&lt;p&gt;PS1 可以支持以下这些选项：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;\d：显示曰期，格式为”星期 月 日”。&lt;br /&gt;
\H：显示完整的主机名。如默认主机名”localhost.localdomain”。&lt;br /&gt;
\h：显示简写的主机名。如默认主机名”localhost”。&lt;br /&gt;
\t：显示 24 小时制时间，格式为”HH:MM:SS”。&lt;br /&gt;
\T：显示 12 小时制时间，格式为”HH:MM:SS”。&lt;br /&gt;
\A：显示 24 小时制时间，格式为”HH:MM”。&lt;br /&gt;
@：显示 12 小时制时间，格式为”HH:MM am/pm”。&lt;br /&gt;
\u：显示当前用户名。&lt;br /&gt;
\v：显示 Bash 的版本信息。&lt;br /&gt;
\w：显示当前所在目录的完整名称。&lt;br /&gt;
\W：显示当前所在目录的最后一个目录。&lt;br /&gt;
#：执行的第几条命令。&lt;br /&gt;
$：提示符。如果是 root 用户，则会显示提示符为”#”；如果是普通用户，则会显示提示符为”$”。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这些选项该怎么用呢？我们先看看 PS1 变量的默认值，如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost ~]# echo $PS1
[\u@\h\W]\$
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;默认的提示符是显示”[用户名@简写主机名最后所在目录]提示符”&lt;/p&gt;

&lt;p&gt;在 PS1 变量中，如果是可以解释的符号，如”\u”、”\h”等，则显示这个符号的作用；如果是不能解释的符号，如”@“或”空格”，则原符号输出。我们修改一下 PS1 变量，看看会出现什么情况。&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost ~]# PS1='[\u@\t \w]\$'
#修改提示符为'[用户名@当前时间当前所在完整目录]提示符'
[root@04:46:40 ~]#cd /usr/local/src/
#切换到当前所在目录，因为家目录是看不出来区别的
[root@04:47:29 /usr/local/src]#
#看到了吗？提示符按照我们的设计发生了变化

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里要小心，PS1 变量的值要用单引号包含，否则设置不生效。再举个例子：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@04:50:08 /usr/local/src]#PS1='[\u@ \@ \h \# \W]\$'
[root@04:53上午 localhost 31 src]#
#提示符又变了。\@：时间格式是HH:MM am/pm;\#:会显示执行了多少条命令

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;PS1 变量可以自由定制，好像看到了一点 Linux 可以自由定制和修改的影子，还是很有意思的。不过说实话，一个提示符已经使用习惯了，如果换一个还是非常别扭的，还是改回默认的提示符吧，命令如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@04:53上午 localhost 31 src]#PS1='[\u@\h \W]\$'
[root@localhost src]#
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;注意，这些提示符的修改同样是临时生效的，一旦注销或重启系统就会消失。要想永久生效，必须写入环境变量配置文件。&lt;/p&gt;

</description>
        <pubDate>Tue, 16 Nov 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/11/MacOS%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF%E9%9A%90%E8%97%8F%E7%94%B5%E8%84%91%E5%90%8D%E5%92%8C%E7%94%A8%E6%88%B7%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/11/MacOS%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%BB%88%E7%AB%AF%E9%9A%90%E8%97%8F%E7%94%B5%E8%84%91%E5%90%8D%E5%92%8C%E7%94%A8%E6%88%B7%E5%90%8D%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>git clone深度</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;对于巨大的项目git clone的时候用 git clone -b '目标分支' --depth 1  'git@xxxxx.git'  或  git clone  --single-branch --depth 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 26 Oct 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/10/git_clone_depth/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/10/git_clone_depth/</guid>
        
        <category>git</category>
        
        
      </item>
    
      <item>
        <title>iOS打印符号断点参数</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;//打印第一个参数
po $arg3
//打印第2个参数
po $arg4
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 13 Sep 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/09/iOS_print_arg/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/09/iOS_print_arg/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS AppHook</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#import &amp;lt;objc/runtime.h&amp;gt;
#import &amp;lt;Foundation/Foundation.h&amp;gt;

NS_ASSUME_NONNULL_BEGIN

@interface NSObject (AppHook)

void ct_hookMethod(Class originalClass, SEL originalSelector, Class swizzledClass, SEL swizzledSelector);
void ct_hookClassMethod(Class originalClass, SEL originalSelector, Class swizzledClass, SEL swizzledSelector);
void ct_addMethod(Class originalClass,Class swizzledClass, SEL swizzledSelector);

@end

NS_ASSUME_NONNULL_END

@implementation NSObject (AppHook)

void ct_hookMethod(Class originalClass, SEL originalSelector, Class swizzledClass, SEL swizzledSelector) {
    Method originalMethod = class_getInstanceMethod(originalClass, originalSelector);
    Method swizzledMethod = class_getInstanceMethod(swizzledClass, swizzledSelector);
    if(originalMethod &amp;amp;&amp;amp; swizzledMethod) {
        method_exchangeImplementations(originalMethod, swizzledMethod);
    }
}

void ct_hookClassMethod(Class originalClass, SEL originalSelector, Class swizzledClass, SEL swizzledSelector) {
    Method originalMethod = class_getClassMethod(originalClass, originalSelector);
    Method swizzledMethod = class_getClassMethod(swizzledClass, swizzledSelector);
    if(originalMethod &amp;amp;&amp;amp; swizzledMethod) {
        method_exchangeImplementations(originalMethod, swizzledMethod);
    }
}

void ct_addMethod(Class originalClass,Class swizzledClass, SEL swizzledSelector)
{
    Method swizzledMethod = class_getInstanceMethod(swizzledClass, swizzledSelector);
    class_addMethod(originalClass,swizzledSelector,method_getImplementation(swizzledMethod),method_getTypeEncoding(swizzledMethod));
}

+ (void)load
{
    static dispatch_once_t onceToken;
    dispatch_once(&amp;amp;onceToken, ^{
        Class card_class = objc_getClass(&quot;HookClass&quot;);
        if (card_class) {
            ct_hookMethod(card_class, @selector(originSelector:), [self class], @selector(hookSelector:));
        }
    });
}

- (void)hookSelector:(id)arg
{
   [self hookeSelector:arg];
}

@end

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Mon, 13 Sep 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/09/iOSAppHook/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/09/iOSAppHook/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
  </channel>
</rss>
