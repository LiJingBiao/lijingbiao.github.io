<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LiJingBiao</title>
    <description>欢迎来到我的个人博客~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 08 May 2021 15:40:50 +0800</pubDate>
    <lastBuildDate>Sat, 08 May 2021 15:40:50 +0800</lastBuildDate>
    <generator>Jekyll v3.8.5</generator>
    
      <item>
        <title>iOS查找汉字字符串</title>
        <description>&lt;h1 id=&quot;ios查找汉字字符串&quot;&gt;iOS查找汉字字符串&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@&quot;[^&quot;]*[\u4E00-\u9FA5]+[^&quot;\n]*?&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sat, 08 May 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/05/iOS%E6%9F%A5%E6%89%BE%E6%B1%89%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/05/iOS%E6%9F%A5%E6%89%BE%E6%B1%89%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>xcconfig的使用与xcode环境变量</title>
        <description>&lt;h1 id=&quot;xcconfig的使用与xcode环境变量&quot;&gt;xcconfig的使用与xcode环境变量&lt;/h1&gt;

&lt;p&gt;在正式使用xcconfig之前，还是得先把这几个概念给区分一下。什么是workspace，什么是project，什么是target。下面一张图简单说明：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/iOS/xcconfig/1293297-1a55808c63b6d254.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;workspace，顾名思义就是我们的工作区。一个workspace可以包含多个project以及一些其它文件。workspace也可以把多可以project组织起来。&lt;/li&gt;
  &lt;li&gt;一个project会包含属于这个项目的所有文件，资源，以及生成一个或者多个软件产品的信息。&lt;/li&gt;
  &lt;li&gt;一个project会包含一个或者多个 target，而每一个 target都对应一个products，也就是最终产生的.app。&lt;/li&gt;
  &lt;li&gt;一个targets可以有多个configuration（如我们平常用到的debug和release，当然我们还可以自己添加），每个configuration就会有对应的build settings。每次build都是在一个configuration下build的。&lt;/li&gt;
  &lt;li&gt;build setting 中包含了 product 生成过程中所需的参数信息。project的build settings会对于整个project 中的所有targets生效，而target的build settings是重写了project的build settings，重写的配置以target为准。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;那么，什么又是scheme呢？scheme就相当于一个组织者。在build的时候，schema会指定一个target和configuration，这样就能保证在build的时候configuration的唯一性，就能产生一个特定的product。&lt;/p&gt;

&lt;p&gt;OK。理清了这些环境变量后，就可以来介绍一下xcconfig了。&lt;br /&gt;
在项目中使用了cocoapods的都会发现，在pod项目中有.xcconfig这样的文件，一般有多少个configuration就会有多少个.xcconfig这样的文件。一般工程中就分为debug和release两个。这里的.xcconfig文件就是通过文本方式指定build settings的一种形式。&lt;/p&gt;

&lt;p&gt;所以我们也可以在工程中通过创建xcconfig来指定build settings。这样能够更加方面管理和修改。&lt;/p&gt;

&lt;p&gt;下面我在一个demo工程中创建了几个xcconfig。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/iOS/xcconfig/1293297-90b863682f33401e.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中common为通用configuration。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/iOS/xcconfig/1293297-d0fc013b5a6e9730.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所有环境相同的settings可以写在这里。然后你就可以在里面去添加任意键值对了。下面是&lt;code class=&quot;highlighter-rouge&quot;&gt;settings.release.xcconfig&lt;/code&gt;的一个示例。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// settings.release.xcconfig
#include &quot;settings.common.xcconfig&quot;
#include &quot;Pods/Target Support Files/Pods-TTLivenessDetection_Example/Pods-TTLivenessDetection_Example.release.xcconfig&quot;
ONLY_ACTIVE_ARCH = NO
ENABLE_BITCODE = YES
test = 123
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后在project-&amp;gt;info中去设置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/iOS/xcconfig/1293297-cf1ac2fc9ef5e5f5.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这里有个坑就是自定义配置后会导致cocoapods无法使用，这里需要在相应的xcconfig里面导入相应的pod的xcconfig&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#include &quot;Pods/Target Support Files/Pods-TTLivenessDetection_Example/Pods-
TTLivenessDetection_Example.release.xcconfig&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果还报这种错&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[!] The `TTLivenessDetection_Example [Debug]` target overrides the 
`HEADER_SEARCH_PATHS` build setting defined in `Pods/Target Support 
Files/Pods-TTLivenessDetection_Example/Pods-
TTLivenessDetection_Example.debug.xcconfig'. This can lead to problems with the CocoaPods installation
    - Use the `$(inherited)` flag, or
    - Remove the build settings from the target.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;按照它说的把&lt;code class=&quot;highlighter-rouge&quot;&gt;HEADER_SEARCH_PATHS&lt;/code&gt;改为&lt;code class=&quot;highlighter-rouge&quot;&gt;$(inherited)&lt;/code&gt;就可以了。&lt;/p&gt;

&lt;p&gt;另外就是这里有个继承关系，打开levels可以查看&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/iOS/xcconfig/1293297-c3f3005ab8c0d992.webp&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中继承关系如下：&lt;br /&gt;
Target configuration-&amp;gt;Target xcconfig-&amp;gt;Project configuration-&amp;gt;Project xcconfig。&lt;/p&gt;

&lt;p&gt;也就是说如果是单一的配置，继承级低的会覆盖继承等级高的，而像$()这样的会进行叠加。&lt;/p&gt;

</description>
        <pubDate>Fri, 07 May 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/05/xcconfig%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8Excode%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/05/xcconfig%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8Excode%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS添加调试命令</title>
        <description>&lt;p&gt;MonkeyDev里面的添加lldb命令&lt;/p&gt;

&lt;p&gt;LLDBTools.h文件&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; #import &amp;lt;UIKit/UIKit.h&amp;gt;
 #import &amp;lt;mach/vm_types.h&amp;gt;

 //(lldb) po pviews()

 NSString* pvc(void);

 NSString* pviews(void);

 NSString* pactions(vm_address_t address);

 NSString* pblock(vm_address_t address);

 NSString* methods(const char * classname);

 NSString* ivars(vm_address_t address);

 NSString* choose(const char* classname);

 NSString* vmmap();

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;LLDBTools.mm文件&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#pragma GCC diagnostic ignored &quot;-Wundeclared-selector&quot;

#import &quot;LLDBTools.h&quot;
#import &amp;lt;set&amp;gt;
#import &amp;lt;mach/mach_types.h&amp;gt;
#import &amp;lt;malloc/malloc.h&amp;gt;
#import &amp;lt;objc/runtime.h&amp;gt;
#import &amp;lt;mach/mach_init.h&amp;gt;
#import &amp;lt;mach/mach_error.h&amp;gt;

enum {
    BLOCK_HAS_COPY_DISPOSE =  (1 &amp;lt;&amp;lt; 25),
    BLOCK_HAS_CTOR =          (1 &amp;lt;&amp;lt; 26), // helpers have C++ code
    BLOCK_IS_GLOBAL =         (1 &amp;lt;&amp;lt; 28),
    BLOCK_HAS_STRET =         (1 &amp;lt;&amp;lt; 29), // IFF BLOCK_HAS_SIGNATURE
    BLOCK_HAS_SIGNATURE =     (1 &amp;lt;&amp;lt; 30),
};

struct Block_literal_1 {
    void *isa; // initialized to &amp;amp;_NSConcreteStackBlock or &amp;amp;_NSConcreteGlobalBlock
    int flags;
    int reserved;
    void (*invoke)(void *, ...);
    struct Block_descriptor_1 {
        unsigned long int reserved; // NULL
        unsigned long int size;         // sizeof(struct Block_literal_1)
        // optional helper functions
        void (*copy_helper)(void *dst, void *src);     // IFF (1&amp;lt;&amp;lt;25)
        void (*dispose_helper)(void *src);             // IFF (1&amp;lt;&amp;lt;25)
        // required ABI.2010.3.16
        const char *signature;                         // IFF (1&amp;lt;&amp;lt;30)
    } *descriptor;
    // imported variables
};

NSString* decode(NSString* code);
NSArray* choose_inner(const char * classname);
char * protection_bits_to_rwx (vm_prot_t p);
const char * unparse_inheritance (vm_inherit_t i);
char * behavior_to_text (vm_behavior_t  b);

NSString* decode(NSString* code){
    NSDictionary * encodeMap = @{
                                 @&quot;c&quot;: @&quot;char&quot;,
                                 @&quot;i&quot;: @&quot;int&quot;,
                                 @&quot;s&quot;: @&quot;short&quot;,
                                 @&quot;l&quot;: @&quot;long&quot;,
                                 @&quot;q&quot;: @&quot;long long&quot;,
                                 
                                 @&quot;C&quot;: @&quot;unsigned char&quot;,
                                 @&quot;I&quot;: @&quot;unsigned int&quot;,
                                 @&quot;S&quot;: @&quot;unsigned short&quot;,
                                 @&quot;L&quot;: @&quot;unsigned long&quot;,
                                 @&quot;Q&quot;: @&quot;unsigned long long&quot;,
                                 
                                 @&quot;f&quot;: @&quot;float&quot;,
                                 @&quot;d&quot;: @&quot;double&quot;,
                                 @&quot;B&quot;: @&quot;bool&quot;,
                                 @&quot;v&quot;: @&quot;void&quot;,
                                 @&quot;*&quot;: @&quot;char *&quot;,
                                 @&quot;@&quot;: @&quot;id&quot;,
                                 @&quot;#&quot;: @&quot;Class&quot;,
                                 @&quot;:&quot;: @&quot;SEL&quot;
                                 };
    
    if(encodeMap[code]){
        return encodeMap[code];
    }else if([code characterAtIndex:0] == '@'){
        if([code characterAtIndex:1] == '?'){
            return code;
        }else if([code characterAtIndex:2] == '&amp;lt;'){
            return [NSString stringWithFormat:@&quot;id%@&quot;, [[code substringWithRange:NSMakeRange(2, code.length-3)] stringByReplacingOccurrencesOfString:@&quot;&amp;gt;&amp;lt;&quot; withString:@&quot;, &quot;]];
        }else{
            return [NSString stringWithFormat:@&quot;%@ *&quot;, [code substringWithRange:NSMakeRange(2, code.length-3)]];
        }
    }else if([code characterAtIndex:0] == '^'){
        return [NSString stringWithFormat:@&quot;%@ *&quot;, decode([code substringFromIndex:1])];
    }
    return code;
}

NSString* pvc(){
    return [[[UIWindow performSelector:@selector(keyWindow)] performSelector:@selector(rootViewController)] performSelector:@selector(_printHierarchy)];
}

NSString* pviews(){
    return [[[UIApplication sharedApplication] keyWindow] performSelector:@selector(recursiveDescription)];
}

NSString* pactions(vm_address_t address){
    NSMutableString* result = [NSMutableString new];
    UIControl* control = (__bridge UIControl*)(void*)address;
    NSArray* targets = [[control allTargets] allObjects];
    for (id item in targets) {
        NSArray* actions = [control actionsForTarget:item forControlEvent:0];
        [result appendFormat:@&quot;&amp;lt;%s: 0x%lx&amp;gt;: %@\n&quot;, object_getClassName(item), (unsigned long)item, [actions componentsJoinedByString:@&quot;,&quot;]];
    }
    return result;
}

NSString* pblock(vm_address_t address){
    struct Block_literal_1 real = *((struct Block_literal_1 *)(void*)address);
    NSMutableDictionary *dict = [NSMutableDictionary dictionary];
    [dict setObject:[NSNumber numberWithLong:(long)real.invoke] forKey:@&quot;invoke&quot;];
    if (real.flags &amp;amp; BLOCK_HAS_SIGNATURE) {
        char *signature;
        if (real.flags &amp;amp; BLOCK_HAS_COPY_DISPOSE) {
            signature = (char *)(real.descriptor)-&amp;gt;signature;
        } else {
            signature = (char *)(real.descriptor)-&amp;gt;copy_helper;
        }
        
        NSMethodSignature *sig = [NSMethodSignature signatureWithObjCTypes:signature];
        NSMutableArray *types = [NSMutableArray array];
        
        [types addObject:[NSString stringWithUTF8String:(char *)[sig methodReturnType]]];
        
        for (NSUInteger i = 0; i &amp;lt; sig.numberOfArguments; i++) {
            char *type = (char *)[sig getArgumentTypeAtIndex:i];
            [types addObject:[NSString stringWithUTF8String:type]];
        }
        
        [dict setObject:types forKey:@&quot;signature&quot;];
    }
    
    NSMutableArray* sigArr = dict[@&quot;signature&quot;];
    
    if(!sigArr){
        return [NSString stringWithFormat:@&quot;Imp: 0x%lx&quot;, [dict[@&quot;invoke&quot;] longValue]];
    }else{
        NSMutableString* sig = [NSMutableString stringWithFormat:@&quot;%@ ^(&quot;, decode(sigArr[0])];
        for (int i = 2; i &amp;lt; sigArr.count; i++) {
            if(i == sigArr.count - 1){
                [sig appendFormat:@&quot;%@&quot;, decode(sigArr[i])];
            }else{
                [sig appendFormat:@&quot;%@ ,&quot;, decode(sigArr[i])];
            }
        }
        [sig appendString:@&quot;);&quot;];
        return [NSString stringWithFormat:@&quot;Imp: 0x%lx    Signature: %s&quot;, [dict[@&quot;invoke&quot;] longValue], [sig UTF8String]];
    }
}

struct CYChoice {
    std::set&amp;lt;Class&amp;gt; query_;
    std::set&amp;lt;id&amp;gt; results_;
};

struct CYObjectStruct {
    Class isa_;
};

static void choose_(task_t task, void *baton, unsigned type, vm_range_t *ranges, unsigned count) {
    CYChoice *choice(reinterpret_cast&amp;lt;CYChoice *&amp;gt;(baton));
    
    for (unsigned i(0); i != count; ++i) {
        vm_range_t &amp;amp;range(ranges[i]);
        void *data(reinterpret_cast&amp;lt;void *&amp;gt;(range.address));
        size_t size(range.size);
        
        if (size &amp;lt; sizeof(CYObjectStruct))
            continue;
        
        uintptr_t *pointers(reinterpret_cast&amp;lt;uintptr_t *&amp;gt;(data));
#ifdef __arm64__
        Class isa = (__bridge Class)((void *)(pointers[0] &amp;amp; 0x1fffffff8));
#else
        Class isa =(__bridge Class)(void *)pointers[0];
#endif
        std::set&amp;lt;Class&amp;gt;::const_iterator result(choice-&amp;gt;query_.find(isa));
        if (result == choice-&amp;gt;query_.end())
            continue;
        
        size_t needed(class_getInstanceSize(*result));
        // XXX: if (size &amp;lt; needed)
        
        size_t boundary(496);
#ifdef __LP64__
        boundary *= 2;
#endif
        if ((needed &amp;lt;= boundary &amp;amp;&amp;amp; (needed + 15) / 16 * 16 != size) || (needed &amp;gt; boundary &amp;amp;&amp;amp; (needed + 511) / 512 * 512 != size))
            continue;
        choice-&amp;gt;results_.insert((__bridge id)(data));
    }
}

static Class *CYCopyClassList(size_t &amp;amp;size) {
    size = objc_getClassList(NULL, 0);
    Class *data(reinterpret_cast&amp;lt;Class *&amp;gt;(malloc(sizeof(Class) * size)));
    
    for (;;) {
        size_t writ(objc_getClassList(data, (int)size));
        if (writ &amp;lt;= size) {
            size = writ;
            return data;
        }
        
        Class *copy(reinterpret_cast&amp;lt;Class *&amp;gt;(realloc(data, sizeof(Class) * writ)));
        if (copy == NULL) {
            free(data);
            return NULL;
        }
        
        data = copy;
        size = writ;
    }
}

static kern_return_t CYReadMemory(task_t task, vm_address_t address, vm_size_t size, void **data) {
    *data = reinterpret_cast&amp;lt;void *&amp;gt;(address);
    return KERN_SUCCESS;
}

NSArray* choose_inner(const char * classname){
    
    Class _class = NSClassFromString([NSString stringWithUTF8String:classname]);
    
    vm_address_t *zones = NULL;
    unsigned size = 0;
    //获取所有的zone信息  堆上的区域
    kern_return_t error = malloc_get_all_zones(mach_task_self(), &amp;amp;CYReadMemory, &amp;amp;zones, &amp;amp;size);
    assert(error == KERN_SUCCESS);
    
    size_t number;
    Class *classes(CYCopyClassList(number));
    assert(classes != NULL);
    
    CYChoice choice;
    
    //找到目标Class
    for (size_t i(0); i != number; ++i)
        for (Class current(classes[i]); current != Nil; current = class_getSuperclass(current))
            if (current == _class) {
                choice.query_.insert(classes[i]);
                break;
            }
    
    for (unsigned i(0); i != size; ++i) {
        const malloc_zone_t *zone(reinterpret_cast&amp;lt;const malloc_zone_t *&amp;gt;(zones[i]));
        if (zone == NULL || zone-&amp;gt;introspect == NULL)
            continue;
        
        //枚举堆上的对象
        zone-&amp;gt;introspect-&amp;gt;enumerator(mach_task_self(), &amp;amp;choice, MALLOC_PTR_IN_USE_RANGE_TYPE, zones[i], &amp;amp;CYReadMemory, &amp;amp;choose_);
    }
    NSMutableArray * result = [[NSMutableArray alloc] init];
    
    for (auto iter = choice.results_.begin(); iter != choice.results_.end(); iter++) {
        [result addObject:(id)*iter];
    }
    return result;
}

NSString* choose(const char* classname){
    NSMutableString* result = [NSMutableString new];
    NSArray* results = choose_inner(classname);
    [result appendFormat:@&quot;Find %lu instance objects in memory!\n&quot; , (unsigned long)results.count];
    for (id item in results) {
        [result appendFormat:@&quot;&amp;lt;%s: 0x%llx&amp;gt;\n&quot;, object_getClassName(item), (long long)item];
    }
    return result;
}

NSString* methods(const char * classname){
    return [objc_getClass(classname) performSelector:@selector(_shortMethodDescription)];
}

NSString* ivars(vm_address_t address){
    id target = (__bridge id)(void*)address;
    return [target performSelector:@selector(_ivarDescription)];
}

char * protection_bits_to_rwx (vm_prot_t p){
    static char returned[4];
    
    returned[0] = (p &amp;amp; VM_PROT_READ    ? 'r' : '-');
    returned[1] = (p &amp;amp; VM_PROT_WRITE   ? 'w' : '-');
    returned[2] = (p &amp;amp; VM_PROT_EXECUTE ? 'x' : '-');
    returned[3] = '\0';
    
    // memory leak here. No biggy
    return (strdup(returned));
}

const char * unparse_inheritance (vm_inherit_t i){
    switch (i){
        case VM_INHERIT_SHARE:
            return &quot;share&quot;;
        case VM_INHERIT_COPY:
            return &quot;copy&quot;;
        case VM_INHERIT_NONE:
            return &quot;none&quot;;
        default:
            return &quot;???&quot;;
    }
}

char * behavior_to_text (vm_behavior_t  b){
    switch (b){
        case VM_BEHAVIOR_DEFAULT: return((char*)&quot;default&quot;);
        case VM_BEHAVIOR_RANDOM:  return((char*)&quot;random&quot;);
        case VM_BEHAVIOR_SEQUENTIAL: return((char*)&quot;fwd-seq&quot;);
        case VM_BEHAVIOR_RSEQNTL: return((char*)&quot;rev-seq&quot;);
        case VM_BEHAVIOR_WILLNEED: return((char*)&quot;will-need&quot;);
        case VM_BEHAVIOR_DONTNEED: return((char*)&quot;will-need&quot;);
        case VM_BEHAVIOR_FREE: return((char*)&quot;free-nowb&quot;);
        case VM_BEHAVIOR_ZERO_WIRED_PAGES: return((char*)&quot;zero-wire&quot;);
        case VM_BEHAVIOR_REUSABLE: return((char*)&quot;reusable&quot;);
        case VM_BEHAVIOR_REUSE: return((char*)&quot;reuse&quot;);
        case VM_BEHAVIOR_CAN_REUSE: return((char*)&quot;canreuse&quot;);
        default: return ((char*)&quot;?&quot;);
    }
}

__BEGIN_DECLS

extern kern_return_t mach_vm_region
(
 vm_map_t target_task,
 mach_vm_address_t *address,
 mach_vm_size_t *size,
 vm_region_flavor_t flavor,
 vm_region_info_t info,
 mach_msg_type_number_t *infoCnt,
 mach_port_t *object_name
 );

__END_DECLS

NSString* vmmap(){
    vm_region_basic_info_data_t info, prev_info;
    mach_vm_address_t address = 1, prev_address;
    mach_vm_size_t size, prev_size;
    mach_msg_type_number_t count = VM_REGION_BASIC_INFO_COUNT_64;
    mach_port_t object_name;
    
    int nsubregions = 0;
    kern_return_t kr = mach_vm_region(mach_task_self(), &amp;amp;address, &amp;amp;size, VM_REGION_BASIC_INFO, (vm_region_info_t)&amp;amp;info, &amp;amp;count, &amp;amp;object_name);
    
    NSMutableString* result = [[NSMutableString alloc] init];
    
    if(kr != KERN_SUCCESS){
        [result appendFormat:@&quot;mach_vm_region: Error %d - %s&quot;, kr, mach_error_string(kr)];
        return [result copy];
    }
    
    //保存之前查到的info
    memcpy (&amp;amp;prev_info, &amp;amp;info, sizeof (vm_region_basic_info_data_t));
    prev_address = address;
    prev_size = size;
    nsubregions = 1;
    
    while (true) {
        int print = 0, done = 0;
        
        address = prev_address + prev_size;
        
        if (address == 0){
            print = done = 1;
        }
        
        if (!done){
            kr = mach_vm_region (mach_task_self(), &amp;amp;address, &amp;amp;size, VM_REGION_BASIC_INFO, (vm_region_info_t)&amp;amp;info, &amp;amp;count, &amp;amp;object_name);
            
            if (kr != KERN_SUCCESS){
                [result appendFormat:@&quot;mach_vm_region failed for address %llu - Error: %x\n&quot;,address, (kr)];
                print = done = 1;
            }
        }
        
        //等于才是连续的内存，不等于才打印
        if (address != prev_address + prev_size)
            print = 1;
        
        //或者权限信息改变了也打印
        if ((info.protection != prev_info.protection)
            || (info.max_protection != prev_info.max_protection)
            || (info.inheritance != prev_info.inheritance)
            || (info.shared != prev_info.reserved)
            || (info.reserved != prev_info.reserved))
            print = 1;
        
        if (print){
            char *print_size_unit = NULL;
            
            mach_vm_size_t print_size = prev_size;
            if (print_size &amp;gt; 1024) { print_size /= 1024; print_size_unit = (char*)&quot;K&quot;; }
            if (print_size &amp;gt; 1024) { print_size /= 1024; print_size_unit = (char*)&quot;M&quot;; }
            if (print_size &amp;gt; 1024) { print_size /= 1024; print_size_unit = (char*)&quot;G&quot;; }
            
            [result appendFormat:@&quot; %p-%p [%llu%s](%s/%s; %s, %s, %s) %s&quot;,
             (void*)(prev_address),
             (void*)(prev_address + prev_size),
             print_size,
             print_size_unit,
             protection_bits_to_rwx (prev_info.protection),
             protection_bits_to_rwx (prev_info.max_protection),
             unparse_inheritance (prev_info.inheritance),
             prev_info.shared ? &quot;shared&quot; : &quot;private&quot;,
             prev_info.reserved ? &quot;reserved&quot; : &quot;not-reserved&quot;,
             behavior_to_text (prev_info.behavior)];
            
            if (nsubregions &amp;gt; 1)
                [result appendFormat:@&quot; (%d sub-regions)&quot;, nsubregions];
            
            [result appendFormat:@&quot;\n&quot;];
            prev_address = address;
            prev_size = size;
            memcpy (&amp;amp;prev_info, &amp;amp;info, sizeof (vm_region_basic_info_data_t));
            nsubregions = 1;
        }else{
            prev_size += size;
            nsubregions++;
        }
        
        if (done)
            break;
    }
    return [result copy];
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/iOS%E6%B7%BB%E5%8A%A0%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/iOS%E6%B7%BB%E5%8A%A0%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS中MVC设计模式</title>
        <description>&lt;p&gt;在组织大型项目的代码文件时，我们常用MVC的思想。MVC的概念讲起来非常简单，就和对象（object）一样。但是理解和应用起来却非常困难。今天我们就简单总结一下MVC设计理念。&lt;/p&gt;

&lt;p&gt;MVC(Model View Controller)模型(model)－视图(view)－控制器(controller)：&lt;br /&gt;
MVC本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据你可以分别用柱状图、饼图来表示。C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新，从例子可以看出MVC就是Observer设计模式的一个特例。&lt;/p&gt;

&lt;p&gt;MVC是一个设计模式，它强制性的使&lt;a href=&quot;http://baike.baidu.com/view/330120.htm&quot;&gt;应用程序&lt;/a&gt;的输入、处理和输出分开。使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。分层概念&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（一）模型对象&lt;/strong&gt;&lt;br /&gt;
模型对象封装了应用程序的数据，并定义操控和处理该数据的逻辑和运算。例如，模型对象可能是表示游戏中的角色或地址簿中的联系人。用户在视图层中所进行的创建或修改数据的操作，通过控制器对象传达出去，最终会创建或更新模型对象。模型对象更改时（例如通过网络连接接收到新数据），它通知控制器对象，控制器对象更新相应的视图对象。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusion Components这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（二）视图对象&lt;/strong&gt;&lt;br /&gt;
视图对象是应用程序中用户可以看见的对象。视图对象知道如何将自己绘制出来，并可能对用户的操作作出响应。视图对象的主要目的，就是显示来自应用程序模型对象的数据，并使该数据可被编辑。尽管如此，在 MVC 应用程序中，视图对象通常与模型对象分离。在iOS应用程序开发中，所有的控件、窗口等都继承自UIView，对应MVC中的V。UIView及其子类主要负责UI的实现，而UIView所产生的事件都可以采用委托的方式，交给UIViewController实现。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（三）控制器对象&lt;/strong&gt;&lt;br /&gt;
在应用程序的一个或多个视图对象和一个或多个模型对象之间，控制器对象充当媒介。控制器对象因此是同步管道程序，通过它，视图对象了解模型对象的更改，反之亦然。控制器对象还可以为应用程序执行设置和协调任务，并管理其他对象的生命周期。&lt;/p&gt;

&lt;p&gt;控制器对象解释在视图对象中进行的用户操作，并将新的或更改过的数据传达给模型对象。模型对象更改时，一个控制器对象会将新的模型数据传达给视图对象，以便视图对象可以显示它。&lt;/p&gt;

&lt;p&gt;为什么要使用 MVC&lt;br /&gt;
　首先，最重要的一点是多个视图能共享一个模型，现在需要用越来越多的方式来访问你的应用程序。对此，其中一个解决之道是使用MVC，无论你的用户想要Flash界面或是 WAP 界面；用一个模型就能处理它们。由于你已经将数据和业务规则从表示层分开，所以你可以最大化的重用你的代码了。&lt;br /&gt;
　　由于模型返回的数据没有进行格式化，所以同样的构件能被不同界面使用。例如，很多数据可能用HTML来表示，但是它们也有可能要用Adobe Flash和WAP来表示。模型也有状态管理和数据持久性处理的功能，例如，基于会话的购物车和电子商务过程也能被Flash网站或者无线联网的应用程序所重用。&lt;br /&gt;
　　因为模型是自包含的，并且与控制器和视图相分离，所以很容易改变你的应用程序的数据层和业务规则。如果你想把你的数据库从MySQL移植到Oracle，或者改变你的基于RDBMS数据源到LDAP，只需改变你的模型即可。一旦你正确的实现了模型，不管你的数据来自数据库或是LDAP服务器，视图将会正确的显示它们。由于运用MVC的应用程序的三个部件是相互独立，改变其中一个不会影响其它两个，所以依据这种设计思想你能构造良好的松耦合的构件。&lt;br /&gt;
　　对我来说，控制器也提供了一个好处，就是可以使用控制器来联接不同的模型和视图去完成用户的需求，这样控制器可以为构造应用程序提供强有力的手段。给定一些可重用的模型和视图，控制器可以根据用户的需求选择模型进行处理，然后选择视图将处理结果显示给用户。&lt;br /&gt;
&lt;strong&gt;MVC的优点&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;（一）、低耦合性&lt;/strong&gt;&lt;br /&gt;
　　视图层和业务层分离，这样就允许更改视图层代码而不用重新编译模型和控制器代码，同样，一个应用的业务流程或者业务规则的改变只需要改动MVC的模型层即可。因为模型与控制器和视图相分离，所以很容易改变应用程序的数据层和业务规则。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（二）、高重用性和可适用性&lt;/strong&gt;&lt;br /&gt;
　　随着技术的不断进步，现在需要用越来越多的方式来访问应用程序。MVC模式允许你使用各种不同样式的视图来访问同一个服务器端的代码。它包括任何WEB（HTTP）浏览器或者无线浏览器（wap），比如，用户可以通过电脑也可通过手机来订购某样产品，虽然订购的方式不一样，但处理订购产品的方式是一样的。由于模型返回的数据没有进行格式化，所以同样的构件能被不同的界面使用。例如，很多数据可能用HTML来表示，但是也有可能用WAP来表示，而这些表示所需要的命令是改变视图层的实现方式，而控制层和模型层无需做任何改变。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（三）、较低的生命周期成本&lt;/strong&gt;&lt;br /&gt;
　　MVC使开发和维护用户接口的技术含量降低。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（四）、可维护性&lt;/strong&gt;&lt;br /&gt;
　　分离视图层和业务逻辑层也使得应用更易于维护和修改。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;（五）、有利于软件工程化管理&lt;/strong&gt;&lt;br /&gt;
　　由于不同的层各司其职，每一层不同的应用具有某些相同的特征，有利于通过工程化、工具化管理程序代码。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;MVC的缺点：&lt;/strong&gt;&lt;br /&gt;
　　MVC的缺点是由于它没有明确的定义，所以完全理解MVC并不是很容易。使用MVC需要精心的计划，由于它的内部原理比较复杂，所以需要花费一些时间去思考。&lt;br /&gt;
　　你将不得不花费相当可观的时间去考虑如何将MVC运用到你的应用程序，同时由于模型和视图要严格的分离，这样也给调试应用程序带来了一定的困难。每个构件在使用之前都需要经过彻底的测试。一旦你的构件经过了测试，你就可以毫无顾忌的重用它们了。&lt;br /&gt;
　　根据开发者经验，由于开发者将一个应用程序分成了三个部件，所以使用MVC同时也意味着你将要管理比以前更多的文件，这一点是显而易见的。这样好像我们的工作量增加了，但是请记住这比起它所能带给我们的好处是不值一提。&lt;br /&gt;
　　MVC并不适合小型甚至中等规模的应用程序，花费大量时间将MVC应用到规模并不是很大的应用程序通常会得不偿失。&lt;br /&gt;
　　MVC设计模式是一个很好创建软件的途径，它所提倡的一些原则，像内容和显示互相分离可能比较好理解。但是如果你要隔离模型、视图和控制器的构件，你可能需要重新思考你的应用程序，尤其是应用程序的构架方面。如果你肯接受MVC，并且有能力应付它所带来的额外的工作和复杂性，MVC将会使你的软件在健壮性，代码重用和结构方面上一个新的台阶。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;IOS MVC设计模式：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/iOS/MVC/011901561465049.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;图中有几条线把这三部分划分开，有黄线，虚线，和白色的实线。我们把它们想象成路标。你可以看到，在M和V之间有两条黄线，这表示什么呢？它意味着你不能 穿越这黄线，任何一个方向都不行，即M和V完全分离。在图的上部，你可以看到白色的虚线，它意味着你可以自由的穿越它，只要是安全的。那白色的实线呢？它代表你可以穿越，但你必须要买票，或者交点过路费。&lt;/p&gt;

&lt;p&gt;首先， 我们来看C和M之间的绿色箭头，这箭头的方向就代表着“发起对话”的方向，也就是说，发起对话的是C，而做出回答的是M。C可以问M各种各样的问题，但M 只是回答C的问题或要求，它不可以主动的向C要求什么。还记得虚线是畅通无阻的意思吧，所以，C知道M的所有的事情,如果用代码来说明这件事情，就是 说，C可以导入M的头文件或是M的接口（API）。因为C可以通过M的API，所以它就可以肆无忌惮的向M要求这要求那了。&lt;/p&gt;

&lt;p&gt;我们再来看看另外的一个绿色箭头，它是在C和V之间，和前一个绿色箭头的意义一样，它代表C可以直接地向V进行交流。你可以想想，C要把V放到屏幕 上，并设置V的属性，告诉它们什么时候从屏幕上消失，把它们分成组等等。如果C不能自由的向V发号施令的话，程序的显示将会多么的困难,所以，C可以毫无 限制地向V说话。&lt;/p&gt;

&lt;p&gt;可能你已经注意到了，这个箭头上还有outlet(输出口)，outlet可以看作是从C指向V的指针，它在C中被定义。outlet给我们提供了很大的 方便，它使我们在C的内部就可以轻松准确地向V施令。C可以拥有很多的outlet，可以不止一个，这也使它可以更高效的和V进行交流。&lt;/p&gt;

&lt;p&gt;那M和V之间可以交流么？还记得黄线的意思么？完全不可以通过，所以我们是不允许M和V进行交流的。这是因为我们不希望这三部分之间有过多的交流，你想想，假如V在显示时出现了问题，比如有一个图形没有显示出来，我们就要去查找错误，因为C可以和V交流，M也可以和V交流的话，我们就要去检查两个部分。 相反的，只有C可以和V交流的话，在出错时，我们就只需要去C那里查找原因，这样查找错误不就很是简单了么？所以，我们不允许M和V之间有直接的联系，这 也是在它们两之间有两根黄线的原因。 总结下来也就是以下三点：&lt;/p&gt;

&lt;p&gt;（1）、Model和View永远不能相互通信，只能通过Controller传递。&lt;/p&gt;

&lt;p&gt;（2）、Controller可以直接与Model对话（读写调用Model），Model通过Notification和KVO机制与Controller间接通信。&lt;/p&gt;

&lt;p&gt;（3）、Controller可以直接与View对话，通过outlet,直接操作View,outlet直接对应到View中的控件,View通过action向Controller报告事件的发生(如用户Touch我了)。Controller是View的直接数据源（数据很可能是Controller从Model中取得并经过加工了）。Controller是View的代理（delegate),以同步View与Controller。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们接下来讨论V是如何向C发送信息的。V对C的交流有三种不同的方式：&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第一种我们称为目标操作(target-action)。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;它是这样工作的，C会在自己的内部“悬挂”一个目标(target)，如图中的红白相间的 靶子，对应的，它还会分发一个操作(action，如图中的黄色箭头)给将要和它交流的视图对象(可能是屏幕上的一个按钮)，当按钮被按时，action 就会被发送给与之对应的target，这样V就可以和C交流了。但是在这种情况下，V只是知道发送action给对应的target,它并不知道C中的 类，也不知道它到底发送了什么。target-action是我们经常使用的方法。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第二种方式我们叫做委托(delegate)。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有时候，V需要和C进行同步，你知道，用户交互不仅仅是什么按按钮，划滑块，还有很多种形式。好了， 让我们来看看图中的delegate黄色箭头，你发现箭头上又分出了四个小箭头：should，did，will，还有一个没标注的。绝大部分的 delegate信息都是should，will，did这三种形式。和英文意思相对应，should代表视图对象将询问C中的某个对象“我应该这么做 么？”，举个例子，有一个web视图，有人点击了一个链接，web视图就要问“我应该打开这个链接么？这样做安全么？”。这就是should信息。那 will和did呢？will就是“我将要做这件事了”，did就是“我已经做了这件事”。C把自己设置为V的委托(delegate),它让V知道：如 果V想知道更多的关于将如何显示的信息的话，就向C发送delegate信息。通过接受V发过来的delegate信息，C就会做出相应的协调和处理。还 有一点，每个V只能有一个delegate。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;第三种方式就是数据源(datasource)，&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;V不能拥有它所要显示的数据，记住这点非常重要。V希望别人帮助它管理将要显示的数据，当 它需要数据时，它就会请求别人的帮助,把需要的数据给它。再者，iphone的屏幕很小，它不能显示包含大量信息的视图。看图中的datasource箭 头，和delegate类似，V会发送cout，data at信息给C来请求数据。&lt;/p&gt;

&lt;p&gt;对于不同的UIView，有相应的UIViewController，对应MVC中的C。例如在iOS上常用的UITableView，它所对应的Controller就是UITableViewController。&lt;/p&gt;

</description>
        <pubDate>Fri, 30 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/iOS%E4%B8%ADMVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/iOS%E4%B8%ADMVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>高级Bash脚本编程指南</title>
        <description>&lt;p&gt;《高级Bash脚本编程指南》Revision 10中文版&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.linuxplus.org/kb/&quot;&gt;在线阅读链接&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://tldp.org/LDP/abs/html/&quot;&gt;英文版&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://linuxstory.gitbook.io/advanced-bash-scripting-guide-in-chinese/&quot;&gt;gitbook地址&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.tutorialspoint.com/unix/unix-shell.htm&quot;&gt;Unix Shell Programming&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bash.cyberciti.biz/guide/Main_Page&quot;&gt;Linux Shell Scripting Tutorial - A Beginner’s handbook&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/%E9%AB%98%E7%BA%A7Bash%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/%E9%AB%98%E7%BA%A7Bash%E8%84%9A%E6%9C%AC%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/</guid>
        
        <category>shell</category>
        
        
      </item>
    
      <item>
        <title>shell编程之wc命令</title>
        <description>&lt;p&gt;Linux wc命令用于计算字数。&lt;/p&gt;

&lt;p&gt;利用wc指令我们可以计算文件的Byte数、字数、或是列数，若不指定文件名称、或是所给予的文件名为”-“，则wc指令会从标准输入设备读取数据。&lt;/p&gt;

&lt;h1 id=&quot;语法&quot;&gt;语法&lt;/h1&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wc [-clw][--help][--version][文件...]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;参数&quot;&gt;参数：&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;-c或–bytes或–chars 只显示Bytes数。&lt;/li&gt;
  &lt;li&gt;-l或–lines 显示行数。&lt;/li&gt;
  &lt;li&gt;-w或–words 只显示字数。&lt;/li&gt;
  &lt;li&gt;–help 在线帮助。&lt;/li&gt;
  &lt;li&gt;–version 显示版本信息。
    &lt;h2 id=&quot;实例&quot;&gt;实例&lt;/h2&gt;
    &lt;p&gt;在默认的情况下，wc将计算指定文件的行数、字数，以及字节数。使用的命令为：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wc testfile 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;先查看testfile文件的内容，可以看到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ cat testfile  
Linux networks are becoming more and more common, but scurity is often an overlooked  
issue. Unfortunately, in today’s environment all networks are potential hacker targets,  
fro0m tp-secret military research networks to small home LANs.  
Linux Network Securty focuses on securing Linux in a networked environment, where the  
security of the entire network needs to be considered rather than just isolated machines.  
It uses a mix of theory and practicl techniques to teach administrators how to install and  
use security applications, as well as how the applcations work and why they are necesary. 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;使用 wc统计，结果如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ wc testfile           # testfile文件的统计信息  
3 92 598 testfile       # testfile文件的行数为3、单词数92、字节数598 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其中，3 个数字分别表示testfile文件的行数、单词数，以及该文件的字节数。
如果想同时统计多个文件的信息，例如同时统计testfile、testfile_1、testfile_2，可使用如下命令：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wc testfile testfile_1 testfile_2   #统计三个文件的信息 
输出结果如下：

$ wc testfile testfile_1 testfile_2  #统计三个文件的信息  
3 92 598 testfile                    #第一个文件行数为3、单词数92、字节数598  
9 18 78 testfile_1                   #第二个文件的行数为9、单词数18、字节数78  
3 6 32 testfile_2                    #第三个文件的行数为3、单词数6、字节数32  
15 116 708 总用量                    #三个文件总共的行数为15、单词数116、字节数708 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Mon, 26 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/shell%E7%BC%96%E7%A8%8B%E4%B9%8Bwc%E5%91%BD%E4%BB%A4/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/shell%E7%BC%96%E7%A8%8B%E4%B9%8Bwc%E5%91%BD%E4%BB%A4/</guid>
        
        <category>shell</category>
        
        
      </item>
    
      <item>
        <title>iOS判断密码是否合法</title>
        <description>&lt;h1 id=&quot;ios判断密码是否合法&quot;&gt;iOS判断密码是否合法&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string{
    
    NSCharacterSet *cs = [[NSCharacterSet characterSetWithCharactersInString:@&quot;qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890-/:;()$&amp;amp;@\&quot;.,?!'[]{}#%^*+=_'\'|~&amp;lt;&amp;gt;£¥.,?!'&quot;] invertedSet];
    NSString *filtered = [[string componentsSeparatedByCharactersInSet:cs] componentsJoinedByString:@&quot;&quot;];
    if (![string isEqualToString:filtered]) {
        return NO;
    }
    
    NSString * inputString = [textField.text stringByReplacingCharactersInRange:range withString:string];
    
    //输入密码超过16位 不让其再输入,密码8~16位
    if (inputString.length &amp;gt; KPasswordMaxLength) {
        textField.text = [inputString substringToIndex:KPasswordMaxLength];
    }else{
        textField.text = inputString;
    }
    return NO;
}

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 25 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/iOS%E5%88%A4%E6%96%AD%E5%AF%86%E7%A0%81%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/iOS%E5%88%A4%E6%96%AD%E5%AF%86%E7%A0%81%E6%98%AF%E5%90%A6%E5%90%88%E6%B3%95/</guid>
        
        <category>iOS</category>
        
        
      </item>
    
      <item>
        <title>iOS使用Shell自动切换环境</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ENV_TOON=`awk -F: 'BEGIN{};/toon_router_domain/{ gsub(/[[:blank:]]*/,&quot;&quot;,$0);print $0 }' $SRCROOT/../README.MD`
ENV_CDTP=`awk -F: 'BEGIN{};/cdtp_dns_router/{ gsub(/[[:blank:]]*/,&quot;&quot;,$0);print $0 }' $SRCROOT/../README.MD`
ENV_TOON=($ENV_TOON)
ENV_CDTP=($ENV_CDTP)
if [ ${#ENV_TOON[*]} -eq 2 -a ${#ENV_CDTP[*]} -eq 2 ]; then
    ENV_TOON_DEVELOPMENT=${ENV_TOON[0]}
    ENV_TOON_DEVELOPMENT=${ENV_TOON_DEVELOPMENT#*:}
    ENV_TOON_RELEASE=${ENV_TOON[1]}
    ENV_TOON_RELEASE=${ENV_TOON_RELEASE#*:}


    ENV_CDTP_DEVELOPMENT=${ENV_CDTP[0]}
    ENV_CDTP_DEVELOPMENT=${ENV_CDTP_DEVELOPMENT#*:}
    ENV_CDTP_RELEASE=${ENV_CDTP[1]}
    ENV_CDTP_RELEASE=${ENV_CDTP_RELEASE#*:}
else 
    echo 获取失败
    exit 0
fi

echo $ENV_TOON_DEVELOPMENT
echo $ENV_CDTP_DEVELOPMENT

echo $ENV_TOON_RELEASE
echo $ENV_CDTP_RELEASE

info_plist=$SRCROOT/TLauncher/Info.plist
CURRENT_TOON_ENV=$(/usr/libexec/PlistBuddy -c 'Print toon_router_domain' $info_plist)
echo $CURRENT_TOON_ENV

if [ $ENV_TOON_DEVELOPMENT == $CURRENT_TOON_ENV ]; then
    #echo 当前为测试环境
    /usr/libexec/PlistBuddy -c &quot;Set :toon_router_domain $ENV_TOON_RELEASE&quot; $info_plist
    /usr/libexec/PlistBuddy -c &quot;Set :cdtp_dns_router $ENV_CDTP_RELEASE&quot; $info_plist
    echo 由之前测试环境修改为线上环境
 else
    #echo 当前为线上环境
    /usr/libexec/PlistBuddy -c &quot;Set :toon_router_domain $ENV_TOON_DEVELOPMENT&quot; $info_plist
    /usr/libexec/PlistBuddy -c &quot;Set :cdtp_dns_router $ENV_CDTP_DEVELOPMENT&quot; $info_plist
    echo 由之前线上环境修改为测试环境
fi

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 25 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/iOS%E4%BD%BF%E7%94%A8Shell%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E7%8E%AF%E5%A2%83/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/iOS%E4%BD%BF%E7%94%A8Shell%E8%87%AA%E5%8A%A8%E5%88%87%E6%8D%A2%E7%8E%AF%E5%A2%83/</guid>
        
        <category>Shell</category>
        
        
      </item>
    
      <item>
        <title>iOS使用Shell脚本签名</title>
        <description>&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# ${SRCROOT} 它是工程文件所在的目录
TEMP_PATH=&quot;${SRCROOT}/Temp&quot;
#资源文件夹，我们提前在工程目录下新建一个APP文件夹，里面放ipa包
ASSETS_PATH=&quot;${SRCROOT}/APP&quot;
#目标ipa包路径
TARGET_IPA_PATH=&quot;${ASSETS_PATH}/*.ipa&quot;
#清空Temp文件夹
rm -rf &quot;${SRCROOT}/Temp&quot;
mkdir -p &quot;${SRCROOT}/Temp&quot;



#----------------------------------------
# 1. 解压IPA到Temp下
unzip -oqq &quot;$TARGET_IPA_PATH&quot; -d &quot;$TEMP_PATH&quot;
# 拿到解压的临时的APP的路径
TEMP_APP_PATH=$(set -- &quot;$TEMP_PATH/Payload/&quot;*.app;echo &quot;$1&quot;)
# echo &quot;路径是:$TEMP_APP_PATH&quot;


#----------------------------------------
# 2. 将解压出来的.app拷贝进入工程下
# BUILT_PRODUCTS_DIR 工程生成的APP包的路径
# TARGET_NAME target名称
TARGET_APP_PATH=&quot;$BUILT_PRODUCTS_DIR/$TARGET_NAME.app&quot;
echo &quot;app路径:$TARGET_APP_PATH&quot;

rm -rf &quot;$TARGET_APP_PATH&quot;
mkdir -p &quot;$TARGET_APP_PATH&quot;
cp -rf &quot;$TEMP_APP_PATH/&quot; &quot;$TARGET_APP_PATH&quot;



#----------------------------------------
# 3. 删除extension和WatchAPP.个人证书没法签名Extention
rm -rf &quot;$TARGET_APP_PATH/PlugIns&quot;
rm -rf &quot;$TARGET_APP_PATH/Watch&quot;



#----------------------------------------
# 4. 更新info.plist文件 CFBundleIdentifier
#  设置:&quot;Set : KEY Value&quot; &quot;目标文件路径&quot;
/usr/libexec/PlistBuddy -c &quot;Set :CFBundleIdentifier $PRODUCT_BUNDLE_IDENTIFIER&quot; &quot;$TARGET_APP_PATH/Info.plist&quot;


#----------------------------------------
# 5. 给MachO文件上执行权限
# 拿到MachO文件的路径
APP_BINARY=`plutil -convert xml1 -o - $TARGET_APP_PATH/Info.plist|grep -A1 Exec|tail -n1|cut -f2 -d\&amp;gt;|cut -f1 -d\&amp;lt;`
#上可执行权限
chmod +x &quot;$TARGET_APP_PATH/$APP_BINARY&quot;



#----------------------------------------
# 6. 重签名第三方 FrameWorks
TARGET_APP_FRAMEWORKS_PATH=&quot;$TARGET_APP_PATH/Frameworks&quot;
if [ -d &quot;$TARGET_APP_FRAMEWORKS_PATH&quot; ];
then
for FRAMEWORK in &quot;$TARGET_APP_FRAMEWORKS_PATH/&quot;*
do

#签名
/usr/bin/codesign --force --sign &quot;$EXPANDED_CODE_SIGN_IDENTITY&quot; &quot;$FRAMEWORK&quot;
done
fi


#注入
#yololib &quot;$TARGET_APP_PATH/$APP_BINARY&quot; &quot;Frameworks/HankHook.framework/HankHook&quot;








&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 25 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/iOS%E4%BD%BF%E7%94%A8Shell%E8%84%9A%E6%9C%AC%E7%AD%BE%E5%90%8D/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/iOS%E4%BD%BF%E7%94%A8Shell%E8%84%9A%E6%9C%AC%E7%AD%BE%E5%90%8D/</guid>
        
        <category>Shell</category>
        
        
      </item>
    
      <item>
        <title>Shell自动提交Git脚本</title>
        <description>&lt;h1 id=&quot;网上自动提交的脚本&quot;&gt;网上自动提交的脚本&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;单次提交&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
git status
 
&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;是否继续提交? [Y/n] &quot;&lt;/span&gt; input
 
&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;yY][eE][sS]|[yY]&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;继续提交&quot;&lt;/span&gt;
        git add &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;
        git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
        git push origin &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
                    &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nN][oO]|[nN]&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;中断提交&quot;&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
            &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;输入错误，请重新输入&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;循环提交&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
git status
 
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;read&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;是否继续提交? [Y/n] &quot;&lt;/span&gt; input
 
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$input&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;yY][eE][sS]|[yY]&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;继续提交&quot;&lt;/span&gt;
            git add &lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt;
            git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
            git push origin &lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;
                        &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
            &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 
        &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;nN][oO]|[nN]&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;中断提交&quot;&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
                   &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
 
        &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;输入错误，请重新输入&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;自己编写的定制化的脚本&quot;&gt;自己编写的定制化的脚本&lt;/h1&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dirname=`dirname $0`
files=`ls -t ./_posts`
files=($files)
if [[ ${#files[@]} &amp;gt; 1 ]]; then
    lastModifyFile=${files[0]}
fi
if [ ! -z $lastModifyFile ]; then
     lastModifyFile=&quot;${dirname}/_posts/${lastModifyFile}&quot;
     echo $lastModifyFile
fi
if [ -e $lastModifyFile ]; then
    title=`awk '/^title:/{gsub(/[[:blank:]]*/,&quot;&quot;,$0);print $0}' &quot;&quot;$lastModifyFile&quot;&quot;`
    title=${title#*:}
fi

if [ ! -z $title ]; then
     git add -A
     git commit -m &quot;更新${title}&quot;
     git push
     echo &quot;提交${title}成功&quot;
else
     echo &quot;提交失败&quot;
fi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 25 Apr 2021 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2021/04/Shell%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4Git%E8%84%9A%E6%9C%AC/</link>
        <guid isPermaLink="true">http://localhost:4000/2021/04/Shell%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4Git%E8%84%9A%E6%9C%AC/</guid>
        
        <category>Shell</category>
        
        
      </item>
    
  </channel>
</rss>
